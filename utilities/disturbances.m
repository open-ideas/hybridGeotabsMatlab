function [t, v, inputIndexForDisturbances, dictCtlInputs, dictOutputNameIndex, dicValVar, x0] = disturbances(pathBui,flagPlot, debug)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Function to read the output generated by a script 'Create outputs'
    % in dymola and convert them into a time vector (t) and a disturbance
    % matrix (v). If precomputed variables are contained in the output file,
    % they will be added to the matrix v. If flagPlot is set to true, the
    % disturbances will also be plotted. The function also return
    % dictionaries containing the control inputs name and indexes and the
    % output names and indexes.
    % :param:
    %   pathBui     = path to folder containing the linearized model
    %   (ssm.mat), the disturbances (outputs.mat), the list of inputs
    %   (uNames.txt), states (xNames.txt), and outputs (yNames.txt)
    %   flagPlot    = set to true to plot the disturbances.
    %   debug       = create a disturbance vector with all heat inputs zero
    %   and fix temperatures.
    % :outputs:
    %   t = vector with all sampling times (in second)
    %   v = disturbance matrix (contains also the prescribed variables)
    %   inputIndexForDisturbances = vector containing all input index of SSM for all 
    %   disturbances variables
    %   inputs of the SSM.
    %   dictCtlInputs = dictionary containing the control input names and
    %   their index.
    %   dicOutputNameIndex = dictionary containing the output names and
    %   their index.
    %   dicValVar, dicOutputNameIndex, x0: variables used for validations
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if nargin < 2 
        pathBui = '../examples/zoneWithInputs';
        flagPlot = true;
        debug = false;
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % INCLUDE VALIDATION
    VALIDATION = false;
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    path_outputs = [pathBui '/outputs.mat'];
    path_unames = [pathBui '/uNames.txt'];
    path_ynames = [pathBui '/yNames.txt'];
    path_xnames = [pathBui '/xNames.txt'];
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Get disturbance variable names from uNames of model
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    %Read variables names
    fileID = fopen(path_unames,'r');
    content = textscan(fileID,'%s','delimiter','\n');
    fclose(fileID);
    
    % find variables for disturbance
    dNamesInInputs = {'winBusIn','weaBus','prescribedIn'};
    dNamesInOutputs = {'winBusOut','weaBusOut','prescribedOut'};
    inputIndexForDisturbances = [];
    for i=1:length(dNamesInInputs)
        % find string with keyword
        a = strfind(content{1},dNamesInInputs{i});
        % find corresponding index
        ind = find(~cellfun(@isempty,a));
        inputIndexForDisturbances = [inputIndexForDisturbances; ind];
    end;
    % Replace input names by outputs name
    varNames = content{1}(inputIndexForDisturbances);
    for i=1:length(inputIndexForDisturbances)
        for j=1:length(dNamesInInputs)
            varNames{i} = strrep(varNames{i},dNamesInInputs{j},dNamesInOutputs{j});
        end;
    end;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Get initial value of all states
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if VALIDATION
        % Open xNames.txt to know number of states
        fileIDx = fopen(path_xnames,'r');
        contentx = textscan(fileIDx,'%s','delimiter','\n');
        fclose(fileIDx);
        nx = numel(contentx{1});
        % read initial state values
        x0 = zeros(nx,1);
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Get validation variable names from uNames of model
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        dicValVar = findMultipleOutputs(path_outputs,{'propsBusVal'},1);

        for i = 1:nx
            key = ['propsBusVal.TStaInit[' num2str(i) ']'];
            tmp = dicValVar(key);
            x0(i)=tmp(1);
        end;
    else
        dicValVar = 0;
        x0 = 293.15;
    end;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Save control inputs names and indexes into dictionary from uNames of model
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    dNamesControlInputs = {'ctrlInputs'};
    keys = [];
    indices = [];
    for i=1:length(dNamesControlInputs)
        % find strings with keyword
        k = strfind(content{1},dNamesControlInputs{i});
        % find corresponding index
        ind = find(~cellfun(@isempty,k));
        indices = [indices; ind];
        keys = [keys; content{1}(ind)];
    end;
    dictCtlInputs = containers.Map(keys, indices);
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Get disturbance variable values
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    t = findOutput(path_outputs, 'Time' )';
    v = zeros(length(t),length(varNames));
    for i=1:length(varNames)
        if debug
            temp1 = strfind(varNames(i),'Tenv');
            temp2 = strfind(varNames(i),'TskyPow4');
            temp3 = strfind(varNames(i),'TePow4');
            temp4 = strfind(varNames(i),'Te');
            temp5 = strfind(varNames(i),'TGroundDes');
            temp6 = strfind(varNames(i),'dummy');
            if ~isempty(temp1{1}) || ~isempty(temp2{1}) || ~isempty(temp3{1}) || ~isempty(temp4{1}) || ~isempty(temp5{1})
                v(:,i) = ones(length(t),1).*293.15;
            elseif ~isempty(temp4{1})
                v(:,i) = ones(length(t),1);
            else
                v(:,i) = zeros(length(t),1);
            end;
        else
            v(:,i) = findOutput(path_outputs,varNames(i))';
        end;
    end;
    %Remove last point because not equidistant
    t = t(1:end-1);
    v = v(1:end-1,:); 
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Get output names and indices
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %Read variables names
    fileID = fopen(path_ynames,'r');
    contenty = textscan(fileID,'%s','delimiter','\n');
    fclose(fileID);   
    dictOutputNameIndex = containers.Map(contenty{1}, 1:numel(contenty{1}));
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Plot disturbances
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if flagPlot
        % Direct and diffuse [W/m2]
        indISolDir = find(~cellfun(@isempty,strfind(varNames,'iSolDir')));
        indISolDif = find(~cellfun(@isempty,strfind(varNames,'iSolDif')));
        indHDirTil = find(~cellfun(@isempty,strfind(varNames,'HDirTil')));
        indHSkyDifTil = find(~cellfun(@isempty,strfind(varNames,'HSkyDifTil')));
        indHGroDifTil = find(~cellfun(@isempty,strfind(varNames,'HGroDifTil')));
        figure()
        plot( t*ones(1,length(indISolDir)) , v(:,indISolDir) ), hold on
        plot(t,v(:,indISolDif)), 
        plot(t,v(:,indHDirTil)),
        plot(t,v(:,indHSkyDifTil)),
        plot(t,v(:,indHGroDifTil)),hold off
        legend([varNames(indISolDir); varNames(indISolDif); varNames(indHDirTil); varNames(indHSkyDifTil); varNames(indHGroDifTil)])
        xlabel('t [s]')
        ylabel('Direct and diffuse solar radiatons [W/m2]')
        
        % 'Environment and ambient temperature [K]'
        indTEnv = find(~cellfun(@isempty,strfind(varNames,'Tenv')));
        indTePow4 = find(~cellfun(@isempty,strfind(varNames,'TePow4')));
        indTe = find(~cellfun(@isempty,strfind(varNames,'Te')));
        indTe = setdiff(indTe,indTEnv);
        indTe = setdiff(indTe,indTePow4);
        figure()
        plot(t,v(:,indTEnv)), hold on
        plot(t,v(:,indTe),'k','linewidth',2), hold off
        legend([varNames(indTEnv); varNames(indTe)])
        xlabel('t [s]')
        ylabel('Environment and ambient temperature [K]')
        
        % 'Environment and ambient temperature [K]'
        indQAbsAndISolWin = find(~cellfun(@isempty,strfind(varNames,'AbsQFlow')));
        figure()
        plot(t,v(:,indQAbsAndISolWin)), hold on
        legend(varNames(indQAbsAndISolWin))
        xlabel('t [s]')
        ylabel('Absorbed, direct and diffuse heat through window [W]')
        
        % 'Prescribed heat flows [W]'
        indQGai = find(~cellfun(@isempty,strfind(varNames,'prescribed.Q')));
        if length(indQGai)>1
            figure()
            plot(t,v(:,indQGai)), hold on
            legend(varNames(indQGai))
            xlabel('t [s]')
            ylabel('Prescribed heat flows [W]')
        end;
        
        % Prescribed temperatures [degC]
        indTBou = find(~cellfun(@isempty,strfind(varNames,'prescribed.T')));
        if length(indTBou)>1
            figure()
            plot(t,v(:,indTBou)-273.15), hold on
            legend(varNames(indTBou))
            xlabel('t [s]')
            ylabel('Prescribed temperatures [degC]')
        end;
        
        % Prescribed Mass flow [kg/s]
        indMVen = find(~cellfun(@isempty,strfind(varNames,'prescribed.m_flow')));
        if length(indTBou)>1
            figure()
            plot(t,v(:,indMVen)), hold on
            legend(varNames(indMVen))
            xlabel('t [s]')
            ylabel('Mass flow ventilation [kg/s]')
        end;
        
        % remaining variables
        indPlottedVar = cat(1, indISolDir, indISolDif, indHDirTil, indHSkyDifTil, indHGroDifTil, indTEnv, indQAbsAndISolWin, indQGai , indTBou , indMVen);
        indToPlot = setdiff(1:size(v,2),indPlottedVar);
        if length(indToPlot)>1
            figure()
            plot(t,v(:,indToPlot)), hold on
            legend(varNames(indToPlot))
            xlabel('t [s]')
            ylabel('Remaining variables [?]')
        end;
        
        if VALIDATION
            val = cell2mat(dicValVar.values');
            figure()
            plot(t,val-273.15), hold on
            legend(dicValVar.keys)
            xlabel('t [s]')
            ylabel('Validation Temperature [degC]')

            figure()
            plot(x0-273.15), title('Initial state values'), ylabel('[degC]')
            set(gca, 'XTick', 1:1:nx, 'XTickLabel', contentx{1},'XTickLabelRotation',45);
        end;
    end;
    
end